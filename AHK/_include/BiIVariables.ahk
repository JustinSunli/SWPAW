;~ ##########################################################################
;~ Copyright (c) 2014 Ulf-Dirk Stockburger
;~ ##########################################################################

;~ http://help.solidworks.com/2014/English/api/epdmapi/EPDM.Interop.epdm~EPDM.Interop.epdm.EdmCmdData.html
;~ Variables without values are not listed in the INI file.
BiImainWindowHandleInt := "mainWindowHandleInt" ;~Parent window handle
BiIdebugMode := "debugMode" ;~bebugMode = 0/1

BiIvaultCommandID := "vaultCommandID" ;~Gets the command ID count.
BiIvaultIsLoggedIn := "vaultIsLoggedIn" ;~Gets whether you are logged in to this vault.
BiIvaultLanguage := "vaultLanguage" ;~Gets the language used by the SolidWorks Enterprise PDM client.
BiIvaultName := "vaultName" ;~Gets the name of this vault.
BiIvaultRootFolder := "vaultRootFolder" ;~Gets the root folder of this vault.
BiIvaultRootFolderID := "vaultRootFolderID" ;~Gets the database ID of the root folder of this vault.
BiIvaultRootFolderPath := "vaultRootFolderPath" ;~Gets the file system path to the root folder of this vault.
BiIvaultSilentMode := "vaultSilentMode" ;~Gets whether the add-in is running in silent mode.  
BiIvaultClientType := "vaultClientType" ;~Gets the type of client installation.
BiIvaultItemRootFolder := "vaultItemRootFolder" ;~Gets the interface to the invisible root folder of all items and item folders.
BiIvaultItemRootFolderID := "vaultItemRootFolderID" ;~Gets the ID of the invisible root folder of all items and item folders.
BiIuserFullName := "userFullName" ;~Gets this user's full name.
BiIuserInitials := "userInitials" ;~Gets this user's initials.
BiIuserUserData := "userUserData" ;~Gets and sets arbitrary text data associated with this user.
BiIuserEmail := "userEmail" ;~Gets this user's e-mail address
BiIuserID := "userID" ;~Gets this user's ID.
BiIuserGroupIds := "userGroupIds" ;~Gets the ids of the user's groups.
BiIuserGroupNames := "userGroupNames" ;~Gets the names of the user's groups.
BiIfileCurrentRevision := "fileCurrentRevision" ;~Gets the file's current revision.  
BiIfileCurrentStateName := "fileCurrentStateName" ;~Name of the current state
BiIfileCurrentStateID := "fileCurrentStateID" ;~ID of the current state
BiIfileCurrentVersion := "fileCurrentVersion" ;~Gets the file's current version number.  
BiIfileID := "fileID" ;~Gets the database ID of this file.
BiIfileIsLocked := "fileIsLocked" ;~Gets whether the file is checked out.  
BiIfileLockedByUser := "fileLockedByUser" ;~Gets the user who has the file checked out.  
BiIfileLockedByUserID := "fileLockedByUserID" ;~Gets the ID of the user who has the file checked out.  
BiIfileLockedInFolder := "fileLockedInFolder" ;~Gets the folder in which this file is checked out.  
BiIfileLockedInFolderID := "fileLockedInFolderID" ;~Gets the ID of the folder in which this file is checked out.  
BiIfileLockedOnComputer := "fileLockedOnComputer" ;~Gets the name of the computer to which the file is checked out.  
BiIfileLockPath := "fileLockPath" ;~Gets the full path to the checked-out file.
BiIfileName := "fileName" ;~Gets the name of the file.
BiIfileObjectType := "fileObjectType" ;~Gets the type of object.  
BiIfileCategoryName := "fileCategoryName" ;~Gets the ID of the category to which this file belongs.
BiIfileCategoryID := "fileCategoryID" ;~Gets the ID of the category to which this file belongs.
BiIfileFileType := "fileFileType" ;~Gets the type of this file.
BiIcardButtonNameOfAddInToCall := "cardButtonNameOfAddInToCall" ;~ID of file data card
BiImenuParentFolderID := "menuParentFolderID" ;~ ID of the parent folder
BiImenuMenuID := "menuMenuID" ;~ ID of the context menu
BiIcardButtonID := "cardButtonID" ;~ID of file data card
BiIcardButtonActiveConfiguration := "cardButtonActiveConfiguration" ;~Name of active configuration; can be changed to switch to a new configuration
BiIcardButtonEdmCardFlag := "cardButtonEdmCardFlag" ;~Optionally return a EdmCardFlag return code here
BiIcardButtonControlId := "cardButtonControlId" ;~Optionally return the ID of a card control to set focus to here
BiIcardButtonAllFileConfigurations := "cardButtonAllFileConfigurations" ;~List with the names of all configurations
BiIcardInputModifiedControlID := "cardInputModifiedControlID" ;~ID of the modified card control
BiIcardInputCardID := "cardInputCardID" ;~ID of the card
BiIcardInputActiveConfiguration := "cardInputActiveConfiguration" ;~Name of the active configuration
BiIcardInputUpdatedVariable := "cardInputUpdatedVariable" ;~ID of the updated variable
BiIcardInputAllFileConfigurations := "cardInputAllFileConfigurations" ;~List with the names of all configurations
BiIcardInputVariableName := "cardInputVariableName" ;~Name of the variable
BiIcardListSrcControlID := "cardListSrcControlID" ;~ID of the modified card control
BiIcardListSrcCardID := "cardListSrcCardID" ;~ID of the card
BiIcardListSrcActiveConfiguration := "cardListSrcActiveConfiguration" ;~Name of the active configuration
BiIcardListSrcControlVariableName := "cardListSrcControlVariableName" ;~Name of the Control variable
BiIcardListSrcControlVariableID := "cardListSrcControlVariableID" ;~ID of the Control variable
BiIcardListSrcAllFileConfigurations := "cardListSrcAllFileConfigurations" ;~List with the names of all configurations
BiIpreAddParentFolderID := "preAddParentFolderID" ;~ID of parent folder
BiIpreAddLocalFileName := "preAddLocalFileName" ;~Local file path
BiIpreAddSourceFileName := "preAddSourceFileName" ;~Source file path, if copied or moved
BiIpreAddNetworkSharingLinks := "preAddNetworkSharingLinks" ;~0 for normal files; 1 for network sharing links
BiIpostAddParentFolderID := "postAddParentFolderID" ;~ID of parent folder
BiIpostAddNetworkSharingLinks := "postAddNetworkSharingLinks" ;~0 for normal files; 1 for network sharing links
BiIpreLockParentFolderID := "preLockParentFolderID" ;~ID of folder where put checked-out file
BiIpostLockParentFolderID := "postLockParentFolderID" ;~ID of folder where put checked-out file
BiIpreAddFolderParentFolderID := "preAddFolderParentFolderID" ;~ID of parent folder
BiIpreAddFolderNewFolderName := "preAddFolderNewFolderName" ;~Path to new folder
BiIpostAddFolderFolderID := "postAddFolderFolderID" ;~ID of new folder
BiIpostAddFolderParentFolderID := "postAddFolderParentFolderID" ;~ID of parent folder
BiIpostAddFolderNewFolderName := "postAddFolderNewFolderName" ;~Path to new folder
BiIpreCopyFolderDestinationID := "preCopyFolderDestinationID" ;~ID of destination folder
BiIpreCopyFieID := "preCopyFieID" ;~ID of File
BiIpreCopySourceFolderID := "preCopySourceFolderID" ;~ID of source folder
BiIpreCopySourceFileName := "preCopySourceFileName" ;~Source file path
BiIpreCopyDestinationFileName := "preCopyDestinationFileName" ;~Destination file path
BiIpostCopySourceFolderID := "postCopySourceFolderID" ;~ID of source folder
BiIpostCopySourceFileName := "postCopySourceFileName" ;~Source file path
BiIpreCopyFolderSourceFolderID := "preCopyFolderSourceFolderID" ;~ID of source folder
BiIpreCopyFolderDestinationParentFolderID := "preCopyFolderDestinationParentFolderID" ;~ID of destination folder
BiIpreCopyFolderNewFolderName := "preCopyFolderNewFolderName" ;~Path to new folder
BiIpostCopyFolderFolderID := "postCopyFolderFolderID" ;~ID of new folder
BiIpostCopyFolderSourceFolderID := "postCopyFolderSourceFolderID" ;~ID of source folder
BiIpostCopyFolderParentFolderID := "postCopyFolderParentFolderID" ;~ID of the parent folder
BiIpostCopyFolderFolderName := "postCopyFolderFolderName" ;~ID of the parent folder
BiIpreDeleteParentFolder := "preDeleteParentFolder" ;~ID of folder to delete file in
BiIpostDeleteDeletedFileID := "postDeleteDeletedFileID" ;~ID of file that was deleted
BiIpostDeleteParetnFolderID := "postDeleteParetnFolderID" ;~ID of parent folder of the deleted file
BiIpostDeleteDeletedFileName := "postDeleteDeletedFileName" ;~Path to file that was deleted
BiIpostDeleteNumberOfFoldersInWhichItWasShared := "postDeleteNumberOfFoldersInWhichItWasShared" ;~Number of folders to which the file is shared
BiIpreDeleteFolderFolderID := "preDeleteFolderFolderID" ;~ID of folder to Delete
BiIpreDeleteFolderFolderName := "preDeleteFolderFolderName" ;~Path to folder to delete
BiIpostDeleteFolderFolderID := "postDeleteFolderFolderID" ;~ID of folder to Delete
BiIpostDeleteFolderFolderName := "postDeleteFolderFolderName" ;~Path to folder to delete
BiIpreGetFolderID := "preGetFolderID" ;~ID of folder to get file to; 0 to retrieve a file to a temporary folder
BiIpostGetFolderID := "postGetFolderID" ;~ID of folder to get file to; 0 to retrieve a file to a temporary folder
BiIpreMoveSourceFolderID := "preMoveSourceFolderID" ;~ID of source folderID of source folder
BiIpreMoveDestinationFolderID := "preMoveDestinationFolderID" ;~ID of destination folder
BiIpreMoveDestinationFileName := "preMoveDestinationFileName" ;~Destination file path
BiIpostMoveSourceFolderID := "postMoveSourceFolderID" ;~ID of source folderID of source folder
BiIpostMoveDestinationFolderID := "postMoveDestinationFolderID" ;~ID of destination folder
BiIpostMoveSourceFileName := "postMoveSourceFileName" ;~Source file path
BiIpreMoveFolderFolderID := "preMoveFolderFolderID" ;~ID of folder to move
BiIpreMoveFolderSourceParentFolderID := "preMoveFolderSourceParentFolderID" ;~ID of source parent folder
BiIpreMoveFolderDestinationParentFolderID := "preMoveFolderDestinationParentFolderID" ;~ID of destination parent folder
BiIpreMoveFolderSourceFolderName := "preMoveFolderSourceFolderName" ;~ID of folder to move
BiIpreMoveFolderDestinationFolderName := "preMoveFolderDestinationFolderName" ;~Destination folder path
BiIpostMoveFolderFolderID := "postMoveFolderFolderID" ;~ID of folder to move
BiIpostMoveFolderSourceParentFolderID := "postMoveFolderSourceParentFolderID" ;~ID of source parent folder
BiIpostMoveFolderDestinationParentFolderID := "postMoveFolderDestinationParentFolderID" ;~ID of destination parent folder
BiIpostMoveFolderSourceFolderName := "postMoveFolderSourceFolderName" ;~ID of folder to move
BiIpostMoveFolderDestinationFolderName := "postMoveFolderDestinationFolderName" ;~Destination folder path
BiIpreRenameFileToRenameID := "preRenameFileToRenameID" ;~ID of the file to rename
BiIpreRenameFilesParentFolderID := "preRenameFilesParentFolderID" ;~ID of the file's parent folder
BiIpreRenameNewFileName := "preRenameNewFileName" ;~New file name
BiIpreRenameOldFileName := "preRenameOldFileName" ;~Old file name
BiIpostRenameFileToRenameID := "postRenameFileToRenameID" ;~ID of the file to rename
BiIpostRenameFilesParentFolderID := "postRenameFilesParentFolderID" ;~ID of the file's parent folder
BiIpostRenameNewFileName := "postRenameNewFileName" ;~New file name
BiIpostRenameOldFileName := "postRenameOldFileName" ;~New file name
BiIpreRenameFolderFolderID := "preRenameFolderFolderID" ;~ID of the folder to rename
BiIpreRenameFolderParentFolderID := "preRenameFolderParentFolderID" ;~ID of the folder's parent folder
BiIpreRenameFolderOldFolderName := "preRenameFolderOldFolderName" ;~Old folder name
BiIpreRenameFolderNewFolderName := "preRenameFolderNewFolderName" ;~New folder name
BiIpostRenameFolderFolderID := "postRenameFolderFolderID" ;~ID of the folder to rename
BiIpostRenameFolderParentFolderID := "postRenameFolderParentFolderID" ;~ID of the folder's parent folder
BiIpostRenameFolderOldFolderName := "postRenameFolderOldFolderName" ;~Old folder name
BiIpostRenameFolderNewFolderName := "postRenameFolderNewFolderName" ;~New folder name
BiIpreShareParentFolderID := "preShareParentFolderID" ;~ID of folder to share file from
BiIpreShareDestinationFolderID := "preShareDestinationFolderID" ;~ID of folder to share file to
BiIpostShareParentFolderID := "postShareParentFolderID" ;~ID of folder to share file from
BiIpostShareDestinationFolderID := "postShareDestinationFolderID" ;~ID of folder to share file to
BiIpreStateParentFolderID := "preStateParentFolderID" ;~ID of the file's parent folder
BiIpreStateTransitionID := "preStateTransitionID" ;~ID of the transition (state change) to perform
BiIpreStateDestinationStateName := "preStateDestinationStateName" ;~Name of the destination state
BiIpreStateSourceStateID := "preStateSourceStateID" ;~ID of the source state
BiIpreStateDestinationStateID := "preStateDestinationStateID" ;~ID of the Destination state
BiIpreStateCommentText := "preStateCommentText" ;~Text of the comment
BiIpostStateParentFolderID := "postStateParentFolderID" ;~ID of the file's parent folder
BiIpostStateTransitionID := "postStateTransitionID" ;~ID of the transition (state change) to perform
BiIpostStateDestinationStateName := "postStateDestinationStateName" ;~Name of the destination state
BiIpostStateSourceStateID := "postStateSourceStateID" ;~ID of the source state
BiIpostStateDestinationStateID := "postStateDestinationStateID" ;~ID of the Destination state
BiIpostStateCommentText := "postStateCommentText" ;~Text of the comment
BiIpreUndoLockParentFolderID := "preUndoLockParentFolderID" ;~ID of the file's parent folder
BiIpostUndoLockParentFolderID := "postUndoLockParentFolderID" ;~ID of the file's parent folder
BiIpreUnlockParentFolderID := "preUnlockParentFolderID" ;~ID of the file's parent folder
BiIpreUnlockCommentText := "preUnlockCommentText" ;~Text of the comment
BiIpostUnlockParentFolderID := "postUnlockParentFolderID" ;~ID of the file's parent folder
BiIpostUnlockCommentText := "postUnlockCommentText" ;~Text of the comment
BiIpreLabelFileID := "preLabelFileID" ;~ID of file to set label on; 0 for folders
BiIpreLabelFolderID := "preLabelFolderID" ;~ID of file to set label on; 0 for folders
BiIpreLabelLabelID := "preLabelLabelID" ;~0 for EdmCmd_PreLabel; ID of the created label for EdmCmd_PostLabel
BiIpreLabelLabelName := "preLabelLabelName" ;~Label
BiIpreLabelLabelComment := "preLabelLabelComment" ;~Label
BiIpreLabelFileName := "preLabelFileName" ;~Path to file or folder to create label for; note that this member will only contain the file name without path when file labels are created via the API, since that is not done within the context of a folder
BiIpreLabelCreatedRecursively := "preLabelCreatedRecursively" ;~Non 0 if label is created recursively for this folder, 0 otherwise
BiIpostLabelParentFolderID := "postLabelParentFolderID" ;~ID of the file's parent folder
BiIpostLabelFileID := "postLabelFileID" ;~ID of file to set label on; 0 for folders
BiIpostLabelFolderID := "postLabelFolderID" ;~ID of file to set label on; 0 for folders
BiIpostLabelLabelID := "postLabelLabelID" ;~0 for EdmCmd_postLabel; ID of the created label for EdmCmd_PostLabel
BiIpostLabelLabelName := "postLabelLabelName" ;~Label
BiIpostLabelComment := "postLabelComment" ;~Comment
BiIpostLabelFileName := "postLabelFileName" ;~Path to file or folder to create label for; note that this member will only contain the file name without path when file labels are created via the API, since that is not done within the context of a folder
BiIpostLabelCreatedRecursively := "postLabelCreatedRecursively" ;~Non 0 if label is created recursively for this folder, 0 otherwise
BiIpreLabelDeleteLabelID := "preLabelDeleteLabelID" ;~ID of the label
BiIpreLabelDeleteLabel := "preLabelDeleteLabel" ;~label
BiIpostLabelDeleteLabelID := "postLabelDeleteLabelID" ;~ID of the label
BiIpostLabelDeleteLabel := "postLabelDeleteLabel" ;~label
BiIpreLabelModifyLabelID := "preLabelModifyLabelID" ;~ID of the label
BiIpreLabelModifiyLabel := "preLabelModifiyLabel" ;~label
BiIpreLabelModifiyComment := "preLabelModifiyComment" ;~Comment
BiIpostLabelModofiyLabelID := "postLabelModofiyLabelID" ;~ID of the label
BiIpostLabelModifyLabel := "postLabelModifyLabel" ;~label
BiIpostLabelModifiyComment := "postLabelModifiyComment" ;~Comment